{
  "_args": [
    [
      {
        "raw": "mw-error@git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
        "scope": null,
        "escapedName": "mw-error",
        "name": "mw-error",
        "rawSpec": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
        "spec": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:S-MilkyWay/node-mw-error.git",
          "sshUrl": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
          "httpsUrl": "git+https://github.com/S-MilkyWay/node-mw-error.git",
          "gitUrl": "git://github.com/S-MilkyWay/node-mw-error.git",
          "shortcut": "github:S-MilkyWay/node-mw-error",
          "directUrl": "https://raw.githubusercontent.com/S-MilkyWay/node-mw-error/master/package.json"
        }
      },
      "/Users/firstuser/MilkyWay/var/buildbot/milkyway-mac-worker/build-mac/build"
    ]
  ],
  "_from": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
  "_id": "mw-error@0.6.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/mw-error",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mw-error@git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
    "scope": null,
    "escapedName": "mw-error",
    "name": "mw-error",
    "rawSpec": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
    "spec": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:S-MilkyWay/node-mw-error.git",
      "sshUrl": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
      "httpsUrl": "git+https://github.com/S-MilkyWay/node-mw-error.git",
      "gitUrl": "git://github.com/S-MilkyWay/node-mw-error.git",
      "shortcut": "github:S-MilkyWay/node-mw-error",
      "directUrl": "https://raw.githubusercontent.com/S-MilkyWay/node-mw-error/master/package.json"
    }
  },
  "_requiredBy": [
    "/",
    "/mw-auth-ctrl",
    "/mw-auto-bt-pan-connector",
    "/mw-automagic-client",
    "/mw-conn-ctrl",
    "/mw-conn-selector",
    "/mw-discovery-ctrl",
    "/mw-file-transfer",
    "/mw-port-fwdr",
    "/mw-reg-ctrl",
    "/mw-usb-initiator",
    "/proxy-resolver-mw",
    "/reg-store-mw"
  ],
  "_resolved": "git+ssh://git@github.com/S-MilkyWay/node-mw-error.git#bd313f5ae28f37ae91be20bafe1699cf33f2e226",
  "_shasum": "1dafd2730a1fdd24798b156226a63a9daf4140ed",
  "_shrinkwrap": null,
  "_spec": "mw-error@git+ssh://git@github.com/S-MilkyWay/node-mw-error.git",
  "_where": "/Users/firstuser/MilkyWay/var/buildbot/milkyway-mac-worker/build-mac/build",
  "author": "",
  "bin": {
    "mwerrorcode": "bin/mwerrorcode"
  },
  "dependencies": {},
  "description": "Error definitions",
  "devDependencies": {
    "dtsmake": "0.0.7"
  },
  "gitHead": "bd313f5ae28f37ae91be20bafe1699cf33f2e226",
  "license": "SEE LICENSE IN LICENSE",
  "main": "error.js",
  "name": "mw-error",
  "optionalDependencies": {},
  "readme": "mw-error\n====================\n\nMilkyWay内で共通で利用するエラー定義とエラーコード。\n\nModule Policy\n--------------------\n\nこのModuleで扱うのは、Operational Error(正しく記述されたプログラムで、\n実行時に起きる問題やエラーケース)のみ。\n\nそれ以外の、Programmer errors(プログラム上のバグに起因する問題やエラー\nケース)は、このモジュールでエラーコードを定義しない。\n\nエラーハンドラ側は、mwCodeのプロパティの値で、Operational Errorの処理\nを決定する事を想定している。\n\nModule API\n--------------------\n\n* [Interface](doc/interface.md)\n\n\nMilkyWay Error Handling Policy\n==============================\n\nErrorの種類の共通認識\n---------------------\n\n### Operational Error\n\n* Operational Error(正しく記述されたプログラムで、実行時に起きる問題や\n  エラーケース)に関しては、返す方法(throwするか、callbackで返すか等)は\n  必ず統一する。\n  \n  例)\n  - callbackで処理を返す関数なら、Errorもcallbackで返すのみにする。\n  - Promiseオブジェクトを返す関数なら、Promiseオブジェクトを必ず返して\n    Error時は、Promiseをrejectする方法のみ。\n  - Errorをthrowする関数なら、Errorは必ずthrowする。(非推奨)\n\n\n* Error ObjectのmwCodeにMilkyWayで定義したError Codeを必ず設定する。\n  - このモジュールで定義している、genError()か、genWebApiError()を使う\n    事を推奨する。\n\n  例)\n  ```\n  const mwe = require('mw-error');\n  ```\n\n  ```\n  if ( abortFlag ) {\n    callback(mwe.genError(mwe.E_MW_ABORTED, 'The process aborted'));\n    return;\n  }\n  ```\n  \n  ```\n  if ( res.statusCode !== 200 ) {\n    callback(mwe.genWebApiError(mwe.E_MW_WEBAPI_UNEXPECTED_STATUS, 'The status is wrong.',\n    \t\t\t\t'GET', '/some/apiname', res.statusCode, res.body));\n    return;\n  }\n  ```\n\n  ```\n  return new Promise(function(resolve, reject) {\n    fs.readFile('SOMEFILE', function(err) {\n      if ( err ) {\n        reject(err);\n      }\n      ...\n    }\n  }\n  ```\n\n### Programmer Error\n\n* Programmer Error(プログラム上のバグに起因する問題やエラー)に関しては、\n  発生し次第直ぐに、throwする。\n\n  例)\n  - 値のTypeが想定外の場合、 ->\n  ```\n  if ( typeof someArg !== 'string' ) {\n    throw new TypeError('someArg must be a string.');\n  }\n  ```\n\n  - 引数の添え字の指定が想定外の場合 ->\n  ```\n  if ( num > MAXNUMBER ) {\n    throw new RangeError('num exceeds MAXNUMBER.');\n  }\n  ```\n\n  - その他仕様上、存在し得ない状態、呼び出され方等\n  ```\n  if ( a > 10 && c === 3 ) {\n    throw new Error('This is wrong call. Can not be.');\n  }\n  ```\n\n### 参考情報\n\n* https://www.joyent.com/node-js/production/design/errors\n\n\nOperational Errorを発行する場合、ハンドルする場合の共通知識\n----------------------------------------------------------\n\n* Operational Errorを発行する場合、Errorをハンドルする場合には、Error\n  オブジェクトの次のPropertyを利用する事。\n  \n  * [Error プロパティ一覧](doc/interface.md#module_mwe..MWError)\n\n",
  "readmeFilename": "README.md",
  "scripts": {
    "doc": "jsdoc2md *.js lib/*.js > doc/interface.md",
    "docerrcode": "jsdoc2md lib/*.js > doc/errorcode.md",
    "docusercode": "node ./bin/mwerrorcode > doc/usererrorcode.md",
    "listcode": "node ./bin/mwerrorcode",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.6.2"
}
