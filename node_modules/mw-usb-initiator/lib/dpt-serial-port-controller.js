/**
 * Win/MacにUSB接続されたDPTの仮想シリアルポート(CDC-ACM)の一覧を取り扱う。
 * DPTの仮想シリアルポートの列挙およびNICへの切替を行う。
 */

'use strict';

const log_error = require('debug')('mw-usb-initiator:dpt-serial-port-controller:error');
const log_debug = require('debug')('mw-usb-initiator:dpt-serial-port-controller:debug');

const DPT = require('./dpt-constants');
const DptSerialPort = require('./dpt-serial-port');
const PnpIdHelper = require('./win-pnpid-helper');
const SerialPort = require('serialport-mw');
const retry = require('retry');

/**
 * Win/MacにUSB接続されたDPTの仮想シリアルポート(CDC-ACM)を取り扱うクラス。
 */
class DptSerialPortController {

  /**
   * @constructor
   */
  constructor() {
    this.isRetrying_ = false;
    this.isRetryStopped_ = false;
    this.retryStopCallback = null;
  }

  /**
   * PCにUSB接続されているDPTの仮想シリアルポートのポート名の一覧を列挙する。
   * 
   * @param {function(error:Error, comPortArray:Array.<string>)} callback
   *  - DPTの仮想シリアルポートの一覧の取得結果の通知先callback。
   */
  static enum(callback) {
    log_debug('enum()');

    if (typeof callback !== 'function') {
      const err = new TypeError('callback !== function [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // シリアルポートの一覧を取得する
    SerialPort.list(function onList(error, portArray) {
      if (error) {
        log_error(error);
        callback(error);
        return;
      }
      if (!Array.isArray(portArray)) {
        const err = new TypeError('portArray is not Array [' + typeof portArray + ']');
        log_error(err);
        callback(err);
        return;
      }

      // DPTのVID,PIDを持つ仮想シリアルポート(CDC-ACM)の一覧を作成する 
      let comPortArray = [];
      for (let i = 0; i < portArray.length; i++) {
        const port = portArray[i];
        if (!port) {
          log_error(new Error('[ERROR] illegal port is found.'));
          continue;
        }

        // シリアルポート情報からVID,PIDを抜き出す 
        const usbVidPid = DptSerialPortController.extractUsbVidPid_(port);
        if (!usbVidPid) {
          log_debug('[WARNING] extractUsbVidPid() failed. ' + JSON.stringify(port));
          continue;
        }
        log_debug('[' + port.comName + '] VID: ' + usbVidPid.vid + ' PID: ' + usbVidPid.pid);

        // DPTのVID,PIDを持つシリアルポートか確認する
        if (usbVidPid.vid === DPT.VID_SONY && usbVidPid.pid === DPT.PID_CDC_ACM) {
          comPortArray.push(port.comName);
        }
      }
      callback(null, comPortArray);
    });
  }

  /**
   * シリアルポートの情報からVendor ID (VID) および Product ID (PID) を取得する。 
   * 
   * @param  {Object} portInfo  - SerialPort#list(callback)で返却されるシリアルポートの情報。
   * @return {Object} usbVidPid - Vendor ID および Product ID。エラー時にはnull。
   * @private
   */
  static extractUsbVidPid_(portInfo) {
    if (!portInfo) {
      log_error(new Error('[ERROR] illegal portInfo is specified.'));
      return null;
    }

    switch (process.platform) {
      case 'win32':
        return PnpIdHelper.extractUsbVidPid(portInfo.pnpId);
      case 'darwin':
        return {
          vid: parseInt(portInfo.vendorId, 16),
          pid: parseInt(portInfo.productId, 16),
        };
      default:
        log_error(new Error('[ERROR] unsupported platform : ' + process.platform));
        return null;
    }
  }

  /**
   * Win/MacにUSB接続されている全てのDPTのシリアルポートをRNDIS/CDC-ECMに切り替える。
   * 
   * @param {function(?Error)} callback
   *    USB切り替えの結果通知用のcallback。
   */
  startSwitchingUsbMode(usbDetector, callback) {
    log_debug('startSwitchingUsbMode()');

    if (typeof callback !== 'function') {
      const err = new TypeError('callback !== function  [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // 既にリトライ中の場合には何もしない
    if (this.isRetrying_) {
      return;
    }
    this.isRetrying_ = true;
    this.isRetryStopped_ = false;

    // リトライの設定
    // 1秒間隔で最大10分間リトライする
    const operation = retry.operation({
      retries: 600,     // 最大600回再試行
      factor: 1,        // 待機時間を1倍ずつ更新
      minTimeout: 1000, // 最小1,000msec後に再試行
      maxTimeout: 1000  // 最大1,000msec後に再試行
    });

    const _self = this;
    operation.attempt(function () {
      if (_self.isRetryStopped_) {
        _self.retryStopCallback();
        return;
      }

      DptSerialPortController.switchUsbModeOfAllDevices_(usbDetector, function onSwitch(error) {
        if (!operation.retry(error)) {
          if (error) {
            callback(error);
          } else {
            callback(null);
          }
          _self.isRetrying_ = false;
        }
      });
    });
  }

  /**
   * USB切り替えのリトライ処理を終了させる。
   * 
   * @param {function()} callback
   */
  stopSwithingUsbMode(callback) {
    log_debug('stopSwithingUsbMode()');

    if (typeof callback !== 'function') {
      const err = new TypeError('callback !== function  [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    if (!this.isRetrying_) {
      callback();
      return;
    }
    this.isRetryStopped_ = true;
    this.retryStopCallback = callback;
  }

  /**
   * Win/MacにUSB接続されている全てのDPTのシリアルポートをRNDIS/CDC-ECMに切り替える。
   * 
   * @param {function(error:Error)} callback - USB切り替えの結果通知用のcallback。
   * @private
   */
  static switchUsbModeOfAllDevices_(usbDetector, callback) {
    log_debug('switchUsbModeOfAllDevices_()');

    Promise.resolve()
      // 1. USB(CDC-ACM)の数をカウント
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          log_debug('DptUsbDetector#countUsbSerialPorts()');
          usbDetector.countUsbSerialPorts(function onCount(error, count) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }
            log_debug('DptUsbDetector#countUsbSerialPorts() Count: ' + count);
            resolve(count);
          });
        });
      })
      // 2. シリアルポートの列挙
      .then(function onFullfilled(count) {
        return new Promise(function (resolve, reject) {
          // DPTのシリアルポートの一覧を列挙する
          log_debug('DptSerialPortController#enum()');
          DptSerialPortController.enum(function onList(error, portPathArray) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }
            if (!Array.isArray(portPathArray)) {
              const err = new TypeError('portPathArray is not Array : ' + portPathArray);
              log_error(err);
              reject(err);
              return;
            }
            if (count != portPathArray.length) {
              const err = new Error('The number of USB(CDC-ACM) is illegal. USB:' + count + ' COM:' + portPathArray.length);
              log_error(err);
              reject(err);
              return;
            }
            resolve(portPathArray);
          });
        });
      })
      // 3. USB切替コマンドの発行
      .then(function onFullfilled(portPathArray) {
        // シリアルポートが検出されなかった場合
        if (!portPathArray || portPathArray.length == 0) {
          log_debug('COM port is not found.');
          return Promise.resolve();
        }

        // 各シリアルポートにRNDIS/CDC-ECMへの切り替えコマンドを発行する
        const promiseArray = [];
        for (let i = 0; i < portPathArray.length; i++) {
          const portPath = portPathArray[i];
          const promise = new Promise(function (resolve, reject) {
            log_debug('DptSerialPort#switchToEthernet(' + portPath + ')');
            DptSerialPort.switchToEthernet(portPath, function onSwitch(error) {
              if (error) {
                log_error(error);
              }
              resolve();
            });
          });
          promiseArray.push(promise);
        }
        // 全てのシリアルポートに対するUSB切り替えを待機させる
        return Promise.all(promiseArray);
      })
      // 4. USB切替後に1秒間待機
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          setTimeout(resolve, 1000);
        })
      })
      // 5. USB(CDC-ACM)の数をカウント
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          usbDetector.countUsbSerialPorts(function onCount(error, count) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }
            if (count > 0) {
              // シリアルポートが検出された場合
              const err = new Error('USB(CDC-ACM) is found : ' + count);
              log_error(err);
              reject(err);
              return;
            }
            log_debug('DptUsbDetector#countUsbSerialPorts() Count: ' + count);
            resolve(count);
          });
        });
      })
      // 6. USB切替結果の確認
      .then(function onFullfilled(count) {
        return new Promise(function (resolve, reject) {
          // 再度、DPTのシリアルポート一覧を列挙し、切り替わっていることを確認する
          log_debug('DptSerialPortController#enum()');
          DptSerialPortController.enum(function onList(error, portPathArray) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }

            if (portPathArray && portPathArray.length > 0) {
              // シリアルポートが検出された場合
              const err = new Error('COM port is found. ' + portPathArray);
              log_error(err);
              reject(err);
              return;
            }
            resolve();
          });
        });

      })
      // 7. 結果をcallbackする
      .then(function onFullfilled(value) {
        callback(null);
      }, function onRejected(error) {
        log_error(error);
        callback(error);
      });
  }
}

module.exports = DptSerialPortController;

